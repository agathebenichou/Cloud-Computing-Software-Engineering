name: assignment3
on:
  push:
jobs:

  # Build Job: Builds the image for the meals service
  build:
    runs-on: ubuntu-latest
    env:
      SUBMITTER_NAMES: Adam Vinestock, Agathe Benichou
    steps:
#    - name: Create log file
#      run: |
#        echo "$(date)" > /tmp/log.txt
#        echo "${{ env.SUBMITTER_NAMES }}" >> /tmp/log.txt

    - name: Checkout
      uses: actions/checkout@v3

    - name: Create log file
      run: |
        echo "$(date)" > /tmp/log.txt
        echo "${{ env.SUBMITTER_NAMES }}" >> /tmp/log.txt

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and export
      id: build-and-export
      uses: docker/build-push-action@v3
      with:
        context: HW3
        file: HW3/Dockerfile
        tags: meals:latest
        outputs: type=docker,dest=image.tar

    - name: Log success of building image
      run: |
        if [[ ${{ steps.build-and-export.outcome }} == 'success' ]]; then
          echo "Build Job: image successfully built" >> /tmp/log.txt
        else
          echo "Build Job: image not able to be built" >> /tmp/log.txt
        fi

    - name: Upload image artifact
      uses: actions/upload-artifact@v3
      with:
        name: image_artifact
        path: image.tar

    - name: Logging
      run: | 
        echo "Build Job: Uploaded image artifact" >> /tmp/log.txt

    - name: Upload log artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: log_artifact
        path: /tmp/log.txt


  # Test Job: Uses the image from the Build Job to run it in a container, uses pytest to test the service
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download log artifact from previous job
      uses: actions/download-artifact@v3
      with:
        name: log_artifact
        path: /tmp/log.txt

    - name: Download image artifact from previous job
      uses: actions/download-artifact@v3
#      with:
#        name: image_artifact
#        path: image.tar

    - name: Load Docker image
      run: docker load --input image_artifact/image.tar

    - name: Logging
      run: | 
        echo "Test Job: Loaded Docker image" >> /tmp/log.txt

    - name: Run Docker image in container
      run: |
        docker run --rm -d -p 8000:8000 meals:latest
        if [ $? -eq 0 ]; then
          echo "Test Job: Container up and running" >> /tmp/log.txt
        else
          echo "Test Job: Container failed to run" >> /tmp/log.txt
        fi

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest 
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test with pytest
      run: |
        pytest -v tests/assn3_tests.py > assn3_test_results.txt

    - name: Logging
      run: | 
        echo "Test Job: Tests succeeded" >> /tmp/log.txt

    - name: Upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: assn3_test_results_artifact
        path: assn3_test_results.txt

    - name: Upload log artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: log_artifact
        path: /tmp/log.txt


  # Query Job: Issues specific requests to the service and records the results in a file
  query:
    needs: test
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Download image artifact from previous job
      uses: actions/download-artifact@v3

    - name: Load Docker image
      run: docker load --input image_artifact/image.tar

    - name: Run Docker image in container
      run: docker run -d -p 8000:8000 meals:latest

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Execute Queries and Store Responses
      run: |
        python -c "
        import requests
        import json
        URL = 'http://127.0.0.1:8000'
        resource = 'dishes'
        headers = {'Content-Type': 'application/json'}
        with open('query.txt') as f_in, open('response.txt', 'w') as f_out:
            for line in f_in:
                food_item = line.strip()

                data = json.dumps({'name': food_item})
                post_response = requests.post(url=f'{URL}/{resource}', headers=headers, data=data)
                dish_id = str(post_response.json())
                print(dish_id)
        
                get_response = requests.get(url=f'{URL}/{resource}', headers=headers)
                dish_response = get_response.json()[dish_id]
                print(dish_response)
                f_out.write(f'{food_item} contains {dish_response[\"cal\"]} calories, {dish_response[\"sodium\"]} mgs of sodium, and {dish_response[\"sugar\"]} grams of sugar\\n')
        "

    - name: Upload Response File as Artifact
      uses: actions/upload-artifact@v3
      with:
          name: response
          path: response.txt
