name: assignment3
on:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SUBMITTER_NAMES: Adam Vinestock, Agathe Benichou
    steps:
    - name: Create log file
      run: |
        echo "$(date)" >> log.txt
        echo "${{ env.SUBMITTER_NAMES }}" >> log.txt
    - name: Checkout
      uses: actions/checkout@v3
    - name: Logging
      run: | 
        echo "Build Job: Checkout GitHub repository" >> log.txt
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Logging
      run: | 
        echo "Build Job: Setup Docker Build" >> log.txt
    - name: Build and export
      id: build-and-export
      uses: docker/build-push-action@v3
      with:
        context: HW3
        file: HW3/Dockerfile
        tags: meals:latest
        outputs: type=docker,dest=image.tar
    - name: Log success of building image
      run: |
        if [[ ${{ steps.build-and-export.outcome }} == 'success' ]]; then
          echo "Build Job: image successfully built" >> log.txt
        else
          echo "Build Job: image not able to be built" >> log.txt
        fi
    - name: Upload image artifact
      uses: actions/upload-artifact@v3
      with:
        name: image_artifact
        path: image.tar
    - name: Logging
      run: | 
        echo "Build Job: Uploaded image artifact" >> log.txt
    - name: Upload log artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: log_artifact
        path: log.txt


  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download log artifact
      uses: actions/download-artifact@v3
      with:
        name: log_artifact
    - name: Logging
      run: | 
        if [[ -f log_artifact/log.txt ]]; then
          echo 'here'
          cat log_artifact/log.txt >> log.txt
        fi
    #    1. download image and run it in a container
    - name: Download image artifact from previous job
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Logging
      run: | 
        echo "Test Job: Downloaded image artifact" >> log.txt
    - name: Load Docker image
      run: docker load --input image_artifact/image.tar
    - name: Logging
      run: | 
        echo "Test Job: Loading Docker image" >> log.txt
    - name: Check meals image is loaded
      run: docker image ls
    - name: Run image in container
      run: docker run -d -p 8000:8000 meals:latest
    - name: Logging
      run: | 
        echo "Test Job: Running image in a container" >> log.txt
    - name: Check container is running
      run: docker ps
    #     2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Logging
      run: | 
        echo "Test Job: Checked out GitHub repository" >> log.txt
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Logging
      run: | 
        echo "Test Job: Setup Python" >> log.txt
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest 
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #      3. run pytest tests and check results
    - name: Logging
      run: | 
        echo "Test Action: Installed dependencies" >> log.txt
    - name: Test with pytest
      run: |
        pytest -v tests/assn3_tests.py > assn3_test_results.txt
    - name: Logging
      run: | 
        echo "Test Job: Ran pytest tests" >> log.txt
    - name: Upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: assn3_test_results
        path: assn3_test_results.txt
    - name: Logging
      run: | 
        echo "Test Job: Uploaded test results" >> log.txt
    - name: Upload log artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: log_artifact
        path: log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Download log artifact
      uses: actions/download-artifact@v3
      with:
        name: log_artifact
    - name: Logging
      run: | 
        if [[ -f log_artifact/log.txt ]]; then
          echo 'here'
          cat log_artifact/log.txt >> log.txt
        fi
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: Logging
      run: | 
        echo "Query Job: Checked out repository" >> log.txt
    - name: Download image artifact from previous job
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Logging
      run: | 
        echo "Query Job: Downloaded artifacts" >> log.txt
    - name: Load artifact Docker image
      run: docker load --input image_artifact/image.tar
    - name: Logging
      run: | 
        echo "Query Job: Loaded artifact Docker image" >> log.txt
    - name: Run Docker image in container
      run: docker run -d -p 8000:8000 meals:latest
    - name: Logging
      run: | 
        echo "Query Job: Ran image inside a container" >> log.txt
    - name: Check container is running
      run: docker ps
  #     2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Logging
      run: | 
        echo "Query Job: Checkout artifacts" >> log.txt
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Logging
      run: | 
        echo "Query Job: Setup python" >> log.txt
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    - name: Logging
      run: | 
        echo "Query Job: Installed dependencies" >> log.txt
    - name: Execute Queries and Store Responses
      run: |
        python -c "
        import requests
        import json
        URL = 'http://127.0.0.1:8000'
        resource = 'dishes'
        headers = {'Content-Type': 'application/json'}
        with open('query.txt') as f_in, open('response.txt', 'w') as f_out:
            for line in f_in:
                food_item = line.strip()

                data = json.dumps({'name': food_item})
                post_response = requests.post(url=f'{URL}/{resource}', headers=headers, data=data)
                dish_id = str(post_response.json())
                print(dish_id)
        
                get_response = requests.get(url=f'{URL}/{resource}', headers=headers)
                dish_response = get_response.json()[dish_id]
                print(dish_response)
                f_out.write(f'{food_item} contains {dish_response[\"cal\"]} calories, {dish_response[\"sodium\"]} mgs of sodium, and {dish_response[\"sugar\"]} grams of sugar\\n')
        "
    - name: Logging
      run: | 
        echo "Query Job: Built response file from query file" >> log.txt
    - name: Upload Response File as Artifact
      uses: actions/upload-artifact@v3
      with:
          name: response
          path: response.txt
    - name: Logging
      run: |
        echo "Query Job: Uploaded response file" >> log.txt
    - name: Upload log artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: log_artifact
        path: log.txt