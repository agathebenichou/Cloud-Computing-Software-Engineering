name: assignment3
on:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SUBMITTER_NAMES: Adam Vinestock, Agathe Benichou
    steps:
    - name: Create log file
      run: |
        echo "Line 1: $(date)" >> log.txt
        echo "Line 2: ${{ env.SUBMITTER_NAMES }}" >> log.txt
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export
      id: build-and-export
      uses: docker/build-push-action@v3
      with:
        context: HW3
        file: HW3/Dockerfile
        tags: meals:latest
        outputs: type=docker,dest=image.tar
    - name: Log if image was successfully built
      run: |
        if [[ steps.build-and-export.outputs.result == 'success' ]]; then
          echo "Line 3: image successfully built" >> log.txt
        else
          echo "Line 3: image not able to be built" >> log.txt
        fi
    - name: Upload log artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: log_artifact
        path: log.txt
    - name: Upload image artifact
      uses: actions/upload-artifact@v3
      with:
        name: image_artifact
        path: image.tar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    #    1. download image and run it in a container
    - name: Download image artifact from previous job
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Load Docker image
      run: docker load --input image_artifact/image.tar
    - name: Check meals image is loaded
      run: docker image ls
    - name: Run image in container
      run: docker run -d -p 8000:8000 meals:latest
    - name: Check container is running
      run: docker ps
    #     2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest 
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #      3. run pytest tests and check results
    - name: Test with pytest
      run: |
        pytest -v tests/assn3_tests.py > assn3_test_results.txt
    - name: upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: assn3_test_results
        path: assn3_test_results.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo into Runner
      uses: actions/checkout@v3
    - name: Download image artifact from previous job
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Load artifact Docker image
      run: docker load --input image_artifact/image.tar
    - name: Run Docker image in container
      run: docker run -d -p 8000:8000 meals:latest
    - name: Check container is running
      run: docker ps
  #     2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    - name: Execute Queries and Store Responses
      run: |
        python -c "
        import requests
        import json
        URL = 'http://127.0.0.1:8000'
        resource = 'dishes'
        headers = {'Content-Type': 'application/json'}
        with open('query.txt') as f_in, open('response.txt', 'w') as f_out:
            for line in f_in:
                food_item = line.strip()
                print(food_item)
                data = json.dumps({'name': food_item})
                post_response = requests.post(url=f'{URL}/{resource}', headers=headers, data=data)

                get_response = requests.get(url=f'{URL}/{resource}', headers=headers)
                print(get_response.text) 
                print(get_response.json())
                f_out.write(f'{food_item} contains {get_response.json()[\"cal\"]} calories, {get_response.json()[\"sodium\"]} mgs of sodium, and {get_response.json()[\"sugar\"]} grams of sugar\\n')
        "
    - name: Upload Response File as Artifact
      uses: actions/upload-artifact@v3
      with:
          name: response
          path: response.txt